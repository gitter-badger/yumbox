// Generated by CoffeeScript 1.8.0
(function() {
  var Page, args, crawlPage, fs, levels, root, saveDir, saveSnapshot, waitFor;

  Page = require('webpage');

  fs = require('fs');

  args = require('system').args;

  root = args[1].indexOf('#') > -1 ? [args[1]] : ["" + args[1] + "/#!/"];

  saveDir = args[2] || "./snapshots";

  levels = args[3] || -1;

  levels = parseInt(levels);

  saveSnapshot = function(uri, body) {
    var filename, lastIdx, path;
    lastIdx = uri.lastIndexOf('#!/');
    path = uri.substring(lastIdx + 2, uri.length);
    if (path === '/') {
      path = "/index.html";
    }
    if (path.indexOf('.html') === -1) {
      path += ".html";
    }
    filename = saveDir + path;
    console.log("saving as '" + filename + "'");
    return fs.write(filename, body, 'w');
  };

  waitFor = function(testFx, onReady, timeOutMillis) {
    var condition, interval, maxtimeOutMillis, start;
    timeOutMillis || (timeOutMillis = 3000);
    maxtimeOutMillis = 7000;
    start = new Date().getTime();
    condition = false;
    return interval = setInterval((function() {
      if ((new Date().getTime() - start < maxtimeOutMillis) && !condition) {
        return condition = testFx();
      } else {
        onReady();
        return clearInterval(interval);
      }
    }), 250);
  };

  crawlPage = function(idx, pages, levels) {
    var page, uri;
    if (idx < pages.length && levels !== 0) {
      --levels;
      uri = pages[idx];
      page = Page.create();
      page.settings.userAgent = 'SpecialAgent';
      page.viewportSize = {
        width: 1000,
        height: 800
      };
      return page.open(uri, function(status) {
        if (status !== "success") {
          return console.log("Unable to access network");
        } else {
          return waitFor(function() {
            return page.evaluate(function() {
              return $('body').is("[phantom='true']");
            });
          }, function() {
            var url, urls, _i, _len;
            if (levels !== 0) {
              urls = page.evaluate(function(uri) {
                var links;
                links = document.querySelectorAll('a[href]');
                if (links.lenght < 1) {
                  return [];
                }
                return [].map.call(links, function(link) {
                  var absUrl, href, resolve;
                  href = link.getAttribute('href');
                  if (/\/panel/.test(href) || /http\:/.test(href) || /www\./.test(href)) {
                    return null;
                  }
                  resolve = function(base, url) {
                    var base_regex;
                    base_regex = /^https?:\/\/[^\/]+/i;
                    base = base.match(base_regex)[0];
                    if (url.charAt(0) !== '/') {
                      url = '/' + url;
                    }
                    return base + url;
                  };
                  absUrl = resolve(uri, href);
                  link.setAttribute('href', absUrl);
                  return absUrl;
                });
              }, uri);
            } else {
              urls = [];
            }
            saveSnapshot(uri, page.content);
            for (_i = 0, _len = urls.length; _i < _len; _i++) {
              url = urls[_i];
              if (pages.indexOf(url) < 0 && url !== null && url.length > 0) {
                pages.push(url);
              }
            }
            return crawlPage(idx + 1, pages, levels);
          });
        }
      });
    } else {
      return phantom.exit();
    }
  };

  crawlPage(0, root, levels);

}).call(this);
